function eegPreprocessingMasterAC(R)

debug = 0;

for sub = R.sublist
    for session = 0:16 % remember to start at 0!
        seshname = ['session' num2str(session)];
        data_DBSrejected = loadExpData(R,sub{1},seshname,seshname,'dbsrejected');

%         %% Re-Reference data
%         cfg = [];
%         cfg.reref           = 'yes';                               % the next few lines are intended to create average-referenced data
%         cfg.refchannel      = 'all';                               % to average reference data, the refchannel is set to 'all'
%         cfg.implicitref     = 'FCz';
%         data_preproc        = ft_preprocessing(cfg, data_DBSrejected);

%         % display data for visual inspection while cleaning
%         cfg          = [];
%         cfg.viewmode = 'vertical';
%         cfg.layout   = 'standard_1005.elc';
%         cfg.ylim     = 'maxabs';
%         ft_databrowser(cfg, data_preproc);

%         %% ICA to remove blink artefacts
%         % Reduce number of components
%         dat = cat(2, data_preproc.trial{:});
%         dat(isnan(dat)) = 0;
%         n_ic = rank(dat)/2;

        % Compute ICA components
        cfg = [];
        cfg.method  = 'runica';
        cfg.channel = 'eeg'; % select only EEG channels
        cfg.numcomponent = n_ic;
        comp = ft_componentanalysis(cfg, data_DBSrejected);

        % The next few line plot the Fpx channels in order
        % to compare with the ICA later (if needed)
        if debug == 1
            cfg = [];
            cfg.channel = {'Fp1'}; % channels to be plotted
            cfg.viewmode = 'butterfly'; % data is plotted either 'vertical' or as a 'butterfly'
            cfg.preproc.bpfilter= 'yes'; % filtering and pre-processing of the data
            cfg.preproc.bpfreq = [1 40];
            cfg.preproc.demean = 'yes';
            cfg.preproc.detrend = 'yes';
            cfg.blocksize = 10; % no. of seconds to display
            cfg.layout = 'EEG1005.lay'; % specifies the layout file that should be used for plotting
            ft_databrowser(cfg, data_preproc);
        end

        % The next lines plot the components available in order to
        % selects the ones which correpsond to blink artefacts
        cfg = [];
        cfg.viewmode = 'component';
        cfg.blocksize= 10; % no. of seconds to display
        cfg.layout = 'EEG1005.lay'; % specifies the layout file that should be used for plotting
        try ft_databrowser(cfg, comp, data_DBSrejected); catch; end

%       Reject
        badcomps = input('Which components to remove? e.g., [1 2 3]?       ');
        cfg = [];
        cfg.component = badcomps;
        data_out = ft_rejectcomponent(cfg, comp);

        %% Epoch into 1 second segments
%         data_out = rmfield(data_out,'hdr');
        cfg = [];
        cfg.length = 1;
        data_out = ft_redefinetrial(cfg, data_preproc);

        %% Select bad channels (semi-) automatically and interpolate bad channels
        cfg             = [];
        cfg.metric      = 'zvalue';                                % use by default zvalue method
        cfg.method      = 'summary';                               % use by default summary method
        cfg.keepchannel = 'nan';                                   % fill the channels that are deselected with NaNs
        cfg.channel     = 'eeg';
        temp            = ft_rejectvisual(cfg,data_out);
        bc_select       = any(isnan(cat(2,temp.trial{:})),2);      % find Nans in temp data
        bc              = temp.label(bc_select);                   % get cell array of bad channels for later interpolation

        % perform spline interpolation to restore bad channels
        load(fullfile(R.path.ftpath,'template','neighbours','elec1005_neighb.mat'));%#ok <LOAD> % load neighbors structure
        % load(fullfile(R.path.ftpath,'template','electrode','standard_1005.elc'));%#ok <LOAD> % load electrode structure
        elec = ft_read_sens(fullfile(R.path.ftpath,'template','electrode','standard_1005.elc'));
        temp.elec = elec;

        cfg                 = [];
        cfg.method          = 'spline';
        cfg.neighbours      = neighbours;
        cfg.badchannel      = bc;
        cfg.senstype        = 'eeg';
        data_clean_noref    = ft_channelrepair(cfg, temp);

        %% ICA to remove blink artefacts
        % view channels
        dat = cat(2, data_preproc.trial{:});
        dat(isnan(dat)) = 0;
        n_ic = rank(dat)/2;

        % Compute ICA components
        cfg = [];
        cfg.method       = 'runica';
        cfg.numcomponent = n_ic;
        comp_data_clean_noref = ft_componentanalysis(cfg, data_clean_noref);

%         % Visualise
%         cfg = [];
%         cfg.layout        = 'standard_1005.elc';
%         cfg.viewmode      = 'component';
%         cfg.zlim          = 'maxmin';
%         cfg.compscale     = 'global'; % scale each component separately
%         cfg.contournum    = 6;
%         cfg.artifactalpha = 0.8;
%         ft_databrowser(cfg, comp_data_clean_noref);

        % The next few line plot the Fpx channels in order
        % to compare with the ICA later (if needed)
        cfg = [];
        cfg.channel = {'Fp1'}; % channels to be plotted
        cfg.viewmode = 'butterfly'; % data is plotted either 'vertical' or as a 'butterfly'
        cfg.preproc.bpfilter= 'yes'; % filtering and pre-processing of the data
        cfg.preproc.bpfreq = [1 40];
        cfg.preproc.demean = 'yes';
        cfg.preproc.detrend = 'yes';
        cfg.blocksize = 10; % no. of seconds to display
        cfg.layout = 'EEG1005.lay'; % specifies the layout file that should be used for plotting
        ft_databrowser(cfg, data_clean_noref)

        % The next lines plot the components available in order to
        % selects the ones which correpsond to blink artefacts
        cfg = [];
        cfg.viewmode = 'component';
        cfg.blocksize= 10; % no. of seconds to display
        cfg.layout = 'EEG1005.lay'; % specifies the layout file that should be used for plotting
        try ft_databrowser(cfg, comp_data_clean_noref); catch; end

        % Reject
        badcomps = input('Which components to remove? e.g., [1 2 3]?       ');

        cfg = [];
        cfg.component = badcomps;
        data_pp = ft_rejectcomponent(cfg,comp_data_clean_noref);

        %% save to disc
        % save('C:\Users\alexa\OneDrive\Dokumente\rsEEG\data_preproc\subj1', 'data_preproc', '-v7.3');
        saveExpData(R,sub{1},seshname,seshname,'pp',data_pp)
    end

end

end